// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array arr;
    static int heapBase;
    static int heapSize;
    static int freeList, freeListTail;
    static boolean mightNeedDefrag;

    /** Initializes the class. */
    function void init() {
        let arr = 0;
        let heapBase = 2048;
        //let heapSize = 10;
        let heapSize = 14336;  // from [2048, 16384)
        let freeList = heapBase;  // also by default freeList[0] -> NULL
        let freeListTail = heapBase;
        do Memory.poke(freeList+1, heapSize - 2);
        let mightNeedDefrag = false;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return arr[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let arr[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int i, prev_i, blockSize, block;
        var int bestBlock, bestSize;

        // best fit of memory is returned.
        let i = freeList;
        let prev_i = i;
        while (~(i = 0)) {
            // Need to find a block size at least with two cells
            // bigger than the requesting size, to keep bookkeeping
            // info of next pointer and block size in those two cells
            // of the returning block.
            // Or, if the size exactly matches the requested size, we can just
            // give it the segment that's in freeList directly - optimization :)
            let blockSize = Memory.peek(i + 1);

            // if the first block is exact size, can't give that one, since we
            // need to keep metainformation that the memory is exhausted. Can
            // give exact size only for any subsequent free segment.
            if ((blockSize = size) & ~(i = freeList)) {
                return Memory.doAllocExactBlock(prev_i, i, size);
            }

            if ((blockSize - size) > 1) {
                if ((bestSize = 0) | (blockSize < bestSize)) {
                    let bestSize = blockSize;
                    let bestBlock = i;
                }
            }
            // try next block
            let prev_i = i;
            let i = Memory.peek(i);
        }

        if (Memory.inHeap(bestBlock)) {
            let blockSize = Memory.peek(bestBlock + 1);
            if ((blockSize - size) > 1) {
                return Memory.doAllocPartFromBlock(bestBlock, size);
            }
        }

        // since we've reached this point, memory is full
        // or defragmented; try a defrag and retry once.
        if (mightNeedDefrag) {
            do Memory.defrag();
            return Memory.alloc(size); // retry once
        }

        // Memory is full or too fragmented and there's
        // nothing we can do about it with this algorithm :).
        return -1;
    }

    function int doAllocExactBlock(int prev_i, int i, int size) {
        // shouldn't happen, treated this case before calling.
        if (freeList = i) { return -1; }

        if (freeListTail = i) { let freeListTail = prev_i; }
        // unlink segment i from list.
        do Memory.poke(prev_i, Memory.peek(i));
        return i + 2;
    }

    function int doAllocPartFromBlock(int base, int size) {
        var int blockSize, block;
        let blockSize = Memory.peek(base + 1);
        if ((blockSize - size) > 1) {
            // we've consumed size + 2 out of blockSize of current
            // segment we're on, update its size.
            do Memory.poke(base + 1, blockSize - (size + 2));

            // where new block starts, out of which first two cells
            // keep track of next ptr and block size. We return block+2
            // to user.
            let block = base + (blockSize - size);
            do Memory.poke(block, 0);  // NULL as next of this block, just for sanity
            do Memory.poke(block + 1, size);
            return block + 2;
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int i;
        // go to the end of the linked list of free segments.
        let i = freeListTail;
        // puts last->next = block_address of object received
        do Memory.poke(i, o - 2);
        // set object->next = null.
        do Memory.poke(o - 2, 0);
        // updates the tail of linked list.
        let freeListTail = o - 2;
        // now that we've added a new list to the tail, we tell
        // the system that a defragmentation could help.
        let mightNeedDefrag = true;
        return;
    }

    function void defrag() {
        var int i, j, prev_i, prev_j;

        // uncomment this if you want to see if defrag gets called. Don't use
        // strings though, since those call alloc().
        //do Output.printInt(42);
        //do Output.println();

        // N^2 aggregated running time, two nested loops; whatever..
        let i = freeList;
        let prev_i = i;
        while (~(i = 0)) {
            let j = Memory.peek(i);
            let prev_j = i;
            while (~(j = 0)) {
                if (Memory.areContiguousSegments(i, j)) {
                    // update tail of list in case j is last
                    if (j = freeListTail) { let freeListTail = prev_j; }
                    // Removes j from list and adds it to i.
                    do Memory.poke(prev_j, Memory.peek(j));
                    do Memory.joinSegments(i, j);

                    // go again forward, since segment i has increased.
                    let j = Memory.peek(i);
                    let prev_j = i;
                } else {
                    if (Memory.areContiguousSegments(j, i)) {
                        // 'i' can't be freeList, since that is never moved,
                        // even if it ends up being of size 0 internally.
                        // So no need for if (i == freeList) check.

                        // Removes i from list and adds it to j.
                        do Memory.poke(prev_i, Memory.peek(i));
                        do Memory.joinSegments(j, i);

                        // Update i to next element so we can continue the loop.
                        let i = Memory.peek(prev_i);
                        if (~(i = 0)) {
                            let j = Memory.peek(i);
                        } else {
                            let j = 0;
                        }
                    // if we didn't find any two contiguous segments,
                    // just continue to advance j until its end.
                    } else {
                        let prev_j = j;
                        let j = Memory.peek(j);
                    }
                }
            }
            let prev_i = i;
            let i = Memory.peek(i);
        }

        // we just did a defrag, so no need for another one until
        // we get new deallocated blocks.
        let mightNeedDefrag = false;
        return;
    }

    // adds segment j to i, order is important.
    function void joinSegments(int i, int j) {
        var int size_i, size_j;

        // put j inside i by increasing i's size.
        let size_i = Memory.peek(i + 1);
        let size_j = Memory.peek(j + 1) + 2;
        do Memory.poke(i + 1, size_i + size_j);
        // set j->next to NULL after we've advanced j.
        do Memory.poke(j, 0);
        return;
    }

    // if segment i continues itself with segment j, in this order.
    function boolean areContiguousSegments(int i, int j) {
        return ((i + 2) + Memory.peek(i + 1)) = j;
    }

    function boolean inHeap(int i) {
        return (
            ~(i < heapBase) &
            (i < (heapBase + heapSize))
        );
    }
}
