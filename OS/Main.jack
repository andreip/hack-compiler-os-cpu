class Main {
    function void main() {
        do Main.testOutput();
        //do Main.testScreenDraw2();
        //do Main.testScreenDraw1();
        //do Main.testScreenDrawPixel();
        //do Main.testMemory3();
        //do Main.testMemory2();
        //do Main.testMemory1();
        //do Main.testMathsqrt();
        //do Main.testMathDiv();
        //do Main.testMathMultiply();
        //do Main.testUtilsbitIsSet();
        //do Main.testUtilsIntToBinary();
        //do Main.testUtilsIntToString();
        return;
    }

    function void testOutput() {
        var int i;
        let i = 30;
        while (i < 127) {
            do Output.printChar(i);
            if (i = 50) {
                do Output.println();
            }
            let i = i + 1;
        }

        do Output.moveCursor(10, 1);
        do Output.printString("Ana are mere ");
        do Output.printString("multe");
        do Output.backSpace();

        do Output.println();
        do Output.printInt(123);
        do Output.printChar(32);
        do Output.printInt(10);
        // this should only erase two characters, w/o other parts
        // of its neighbouring characters.
        do Output.moveCursor(0, 0);
        do Output.printChar(32);
        do Output.printInt(0);

        do Output.moveCursor(12, 0);
        do Output.printInt(-12345);
        do Output.println();
        do Output.printString("done 12345");
        do Output.printChar(String.newLine());
        do Output.printInt(32000);
        do Output.println();

        do Output.printInt(-(16384 + 16384));  // smallest num
        do Output.println();

        do Output.printInt(32767);  // biggest num
        do Output.println();

        do Output.printInt(-1);
        do Output.println();

        return;
    }

    function void testScreenDraw2() {
        do Screen.drawLine(0,220,511,220);        // base line
        do Screen.drawRectangle(280,90,410,220);  // house

        do Screen.drawCircle(140,60,30);          // sun

        do Screen.drawLine(124, 85, 156, 85);
        do Screen.drawLine(126, 86, 154, 86);
        do Screen.drawLine(127, 87, 153, 87);
        do Screen.drawLine(130, 88, 150, 88);
        do Screen.drawLine(133, 89, 147, 89);
        do Screen.drawLine(140, 90, 140, 90);

        do Screen.drawLine(140,26, 140, 6);
        do Screen.drawLine(163,35,178,20);
        do Screen.drawLine(174,60,194,60);
        do Screen.drawLine(163,85,178,100);
        do Screen.drawLine(140,94,140,114);
        do Screen.drawLine(117,85,102,100);
        do Screen.drawLine(106,60,86,60);
        do Screen.drawLine(117,35,102,20);
        return;
    }

    function void testScreenDraw1() {
        var int i;
        // draw a shorter line than a word, to see it doesn't overdraw.
        do Screen.drawLine(51, 45, 51, 55);
        do Screen.drawLine(60, 45, 60, 55);
        do Screen.drawLineHorizontal(51, 60, 50); // shorter than a word

        // another horizontal line given in reverse x coords
        do Screen.drawLine(86, 55, 86, 65);
        do Screen.drawLine(106, 55, 106, 65);
        do Screen.drawLine(106,60,86,60);

        // yet another horizontal line w/ vertical ones alongside
        // but which span two sides of the word, even if shorter
        // than a word.
        do Screen.drawLine(133, 84, 133, 94);
        do Screen.drawLine(147, 84, 147, 94);
        do Screen.drawLine(133, 89, 147, 89);

        do Screen.drawLine(300, 100, 0, 150);
        do Screen.drawRectangle(200, 200, 100, 100);
        do Screen.drawCircle(400, 100, 50);
        //let i = 100;
        //while (i < 200) {
        //    do Screen.drawLine(i, 100, i, 200);
        //    let i = i + 1;
        //}

        //do Screen.setColor(false);
        //do Screen.clearScreen();
        return;
    }

    function void testScreenDrawPixel() {
        var int i;
        do Screen.setColor(true);
        while (i < 100) {
            do Screen.drawPixel(256, i);
            let i = i + 1;
        }
        do Screen.setColor(false);
        let i = 30;
        while (i < 60) {
            do Screen.drawPixel(256, i);
            let i = i + 1;
        }
        //do Screen.setColor(false);
        return;
    }

    function void testMemory3() {
        var Array a;
        let a = Array.new(8000);
        do Output.printString("1st alloc of 8k should work:");
        do Output.printInt(a);
        do Output.println();
        do a.dispose();
        // thanks to an optimization done that returns segments
        // from list directly if their size matches exactly, this will work
        // and it wouldn't have worked otherwise.
        let a = Array.new(8000);
        do Output.printString("2nd alloc of 8k should use same segment, defrag doesn't get triggered:");
        do Output.printInt(a);
        do Output.println();
        return;
    }

    // get big chunks of the heap to exhaust it, then release part of few
    // chunks and see that when asking for more memory and not having enough,
    // a defrag is attempted to have the memory alloc finally succeed.
    function void testMemory2() {
        var Array a, b, c;
        let a = Array.new(8000);
        let b = Array.new(8000);  // should fail with -1
        do a.dispose();
        // should succeed since defrag() runs in the bg and aggregates the 8k
        // released above to the existing space.
        let c = Array.new(12000);

        // put outputs at the end since strings don't release
        // their memory after them :( so we would get fragmented
        // heap otherwise and it would fail to have a 12k contiguous space.
        do Output.printString("1st alloc of 8k should succeed: ");
        do Output.printInt(a);
        do Output.println();
        do Output.printString("2nd alloc of 8k should fail: ");
        do Output.printInt(b);
        do Output.println();
        do Output.printString("Releasing first 8k..");
        do Output.println();
        do Output.printString("3rd alloc of 12k succeeds because defrag ran in the bg: ");
        do Output.printInt(c);
        do Output.println();
        // no need to call it, it'll call itself above when in need of memory
        //do Memory.defrag();
        return;
    }

    // test that defrag joines bits and pieces together when called
    // explicitly.
    function void testMemory1() {
        var Array w, x, y, z;
        var Array p;
        var int i;
        while (i < 5) {
            let w = Array.new(i + 1);  // space waste
            do Output.printInt(w);
            do Output.println();
            let x = Array.new(i + 5);
            do Output.printInt(x);
            do Output.println();
            let y = Array.new(i + 4);
            do Output.printInt(y);
            do Output.println();
            let z = Array.new(i + 3);
            do Output.printInt(y);
            do Output.println();

            if (i = 4) {
                let p = z;
            }

            do x.dispose();
            do y.dispose();
            do w.dispose();
            if (~(p = z)) {
                do z.dispose();
            }
            let i = i + 1;
        }
        // it will cause to have two batches, one initial one where
        // freeList points too, and another one of size > 100 words where all
        // the rest of the disposes were joined into. The two blocks can't be
        // merged together because p didn't dispose its memory
        // in time, before callind defrag. Nice! Seems it's working nicely :)
        do Memory.defrag();
        do p.dispose();
        return;
    }

    function void testMathsqrt() {
        do Output.printInt(Math.sqrt(101));
        do Output.println();
        do Output.printInt(Math.sqrt(15128));
        do Output.println();
        do Output.printInt(Math.sqrt(15129));
        do Output.println();
        do Output.printInt(Math.sqrt(32761));  // 181
        do Output.println();
        do Output.printInt(Math.sqrt(32767));
        do Output.println();
        return;
    }

    function void testMathDiv() {
        var int MIN;
        do Output.printString("16 / -4: ");
        do Output.printInt(16 / -4);
        do Output.println();
        do Output.printString("-15 / -5: ");
        do Output.printInt(-15 / -5);
        do Output.println();
        do Output.printString("15 / -6: ");
        do Output.printInt(15 / -6);
        do Output.println();
        do Output.printString("32000 / 10: ");
        do Output.printInt(32000 / 10);
        do Output.println();
        let MIN = 16384 + 16384;
        do Output.printString("-32768 / 10: ");
        do Output.printInt(MIN / 10);
        do Output.println();
        do Output.printString("-32768 / 2: ");
        do Output.printInt(MIN / 2);
        do Output.println();
        do Output.printString("2 / -32768: ");
        do Output.printInt(2 / MIN);
        do Output.println();
        do Output.printString("-32768 / -32768: ");
        do Output.printInt(MIN / MIN);
        do Output.println();
        //// causes it to halt
        //do Output.printInt(15 / 0);
        //do Output.println();
        return;
    }

    function void testMathMultiply() {
        do Output.printInt(5 * 5);
        do Output.println();
        do Output.printInt(5 * -5);
        do Output.println();
        do Output.printInt(-5 * -5);
        do Output.println();
        do Output.printInt(7 * 11);
        do Output.println();
        do Output.printInt(15 * 12);
        do Output.println();
        do Output.printString(Utils.intToBin(15 * 12));
        do Output.println();
        return;
    }

    function void testUtilsIntToBinary() {
        do Output.printString(Utils.intToBin(1));
        do Output.println();
        do Output.printString(Utils.intToBin(4));
        do Output.println();
        do Output.printString(Utils.intToBin(-1));
        do Output.println();
        do Output.printString(Utils.intToBin(16384));
        do Output.println();
        do Output.printString(Utils.intToBin(16384 + 16384));
        do Output.println();
        return;
    }

    function void testUtilsbitIsSet() {
        do Output.printInt(Utils.bitIsSet(16384 + 16384, 15));
        do Output.println();
        do Output.printInt(Utils.bitIsSet(16384 + 16384, 14));
        do Output.println();
        do Output.printInt(Utils.bitIsSet(16384 + 16384, 13));
        do Output.println();
        return;
    }

    function void testUtilsIntToString() {
        do Output.printString("Converting ints to strings");
        do Output.println();
        do Output.printString("123: ");
        do Output.printString(Utils.intToString(123));
        do Output.println();
        do Output.printString("ten: ");
        do Output.printString(Utils.intToString(10));
        do Output.println();
        do Output.printString("one: ");
        do Output.printString(Utils.intToString(1));
        do Output.println();
        do Output.printString("zero: ");
        do Output.printString(Utils.intToString(0));
        do Output.println();
        do Output.printString("20000: ");
        do Output.printString(Utils.intToString(20000));
        do Output.println();
        do Output.printString("32000: ");
        do Output.printString(Utils.intToString(32000));
        do Output.println();
        do Output.printString("32767: ");
        do Output.printString(Utils.intToString(32767));
        do Output.println();
        do Output.printString("-1: ");
        do Output.printString(Utils.intToString(-1));
        do Output.println();
        do Output.printString("-32768: ");
        do Output.printString(Utils.intToString(-(16384 + 16384)));  // smallest num
        do Output.println();
        return;
    }
}
