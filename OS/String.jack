// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, maxLength;
    field Array arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength_arg) {
        let maxLength = maxLength_arg;
        let arr = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do arr.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > (length - 1))) { do Sys.error(11); }
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > (length - 1))) { do Sys.error(12); }
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = maxLength) { do Sys.error(13); }
        let length = length + 1;
        let arr[length - 1] = c;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) { do Sys.error(14); }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean negative, done;
        var int n, i;
        var char c;

        if (charAt(0) = 45) {// minus sign
            let negative = true;
            let i = i + 1;
        }

        while ((i < length()) & ~done) {
            let c = charAt(i);
            if (Utils.isIntegerAscii(c)) {
                let n = (n * 10) + Utils.getIntegerFromAscii(c);
                // overflowed
                if (n < 0) {
                    do Output.printString("String::intValue: Number out of bounds: [-32767, 32767]");
                    do Output.println();
                    do Sys.error(10);
                }
            } else {
                let done = true;
            }
            let i = i + 1;
        }

        if (negative) { let n = -n; }
        return n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int tmp, numDigits, i, d;
        var String xStr;
        var boolean negative;

        // erases any previous content.
        let length = 0;

        // base case where it's already 0.
        if (val = 0) {
            do appendChar(Utils.getIntegerAscii(0));
            return this;
        }

        if (val < 0) {
            let negative = true;
            let numDigits = 1;  // make space for minus sign too.
        }

        let tmp = val;
        while (~(tmp = 0)) {
            let numDigits = numDigits + 1;
            let tmp = tmp / 10;
        }

        if (numDigits > maxLength) {
            do Output.printString("setInt: Not enough space allocated for string.");
            do Output.println();
            do Sys.error(15);
        }

        // fill string so I can use setCharAt(position) on it.
        // since we know its length anyway.
        while (i < numDigits) {
            do appendChar(0);
            let i = i + 1;
        }
        while (~(val = 0)) {
            let tmp = val / 10;
            let d = val - (tmp * 10);  // last digit
            let i = i - 1;
            do setCharAt(i, Utils.getIntegerAscii(Math.abs(d)));
            let val = tmp;
        }
        if (negative) {
            do setCharAt(0, 45);  // minus sign
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
