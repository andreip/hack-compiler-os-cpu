// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int ADDRESS;
    static int MAX_LINE_LENGTH;

    /** Initializes the keyboard. */
    function void init() {
        let ADDRESS = 24576;
        let MAX_LINE_LENGTH = 100;  // characters
        return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(ADDRESS);
    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char key, crtKey;

        // show a prompt of where input will go
        do Output.printChar(0);

        // waits for key press
        while (crtKey = 0) {
            let crtKey = Keyboard.keyPressed();
        }

        let key = crtKey;

        // waits for key release
        while (~(crtKey = 0)) {
            let crtKey = Keyboard.keyPressed();
        }

        do Output.printChar(String.backSpace());
        do Output.printChar(key);
        return key;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String line;
        var char key, enter, backspace;

        let enter = String.newLine();
        let backspace = String.backSpace();
        let line = String.new(MAX_LINE_LENGTH);

        do Output.printString(message);

        while ((line.length() < MAX_LINE_LENGTH) & ~(key = enter)) {
            // read keyboard character and show it on screen.
            let key = Keyboard.readChar();

            // append normal character to internal buffer
            if (~(key = enter) & ~(key=backspace)) {
                let line = line.appendChar(key);
            } else {
                // backspace only if there's anything to erase.
                if (key = backspace) {
                    if (line.length() < 1) { do Sys.error(8); }
                    do line.eraseLastChar();
                }
            }
        }

        // output newline if we've reached max line length.
        if ((line.length() = MAX_LINE_LENGTH) & ~(key = enter)) {
            do Output.printChar(enter);
        }

        return line;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var int n;
        var String line;
        let line = Keyboard.readLine(message);
        let n = line.intValue();
        do line.dispose();
        return n;
    }
}
